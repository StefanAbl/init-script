# yaml-language-server: $schema=https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-playbook.json
---
- hosts: jellyfin0.i.stabl.one
  vars_files:
    - "../secrets.yml"
  vars_prompt:
    - name: ipa_admin_user_password
      prompt: "Please enter password for IPA user {{ ipa_admin_user }}"
      private: yes
  roles:
    #- ../roles/zsh
    #- ../roles/minio_client
    - role: ../roles/promtail
      vars:
        promtail:
          user: jellyfin #Name of the user from above
          run_as_user: svc_jellyfin
          scrape_configs: # scrape configs for loki
          - job_name: system
            static_configs:
            - targets:
              - localhost
              labels:
                host: "{{ansible_facts['fqdn']}}"
                app: promtail
                agent: promtail
                __path__: /var/log/jellyfin/log*.log
  tasks:
  - name: install Jellyfin
    become: yes
    block:
    - name: Install apt-transport-https
      apt:
        name: apt-transport-https
        state: present
    - name: Enable universe repository
      apt_repository:
        repo: "{{ item }}"
      loop:
        - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_facts['lsb']['codename'] }} universe"
        - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_facts['lsb']['codename'] }}-updates universe"
        - "deb http://security.ubuntu.com/ubuntu/ {{ ansible_facts['lsb']['codename'] }}-security universe"
      when: false
    - name: enable universe repository
      shell: echo | DEBIAN_FRONTEND=noninteractive add-apt-repository universe
    - name: add jellyfin apt-key
      apt_key: 
        url: https://repo.jellyfin.org/ubuntu/jellyfin_team.gpg.key
        state: present 
    - name: add jellyfin apt repository
      apt_repository: 
        repo: 'deb [arch=amd64] https://repo.jellyfin.org/ubuntu focal main' 
        state: present 
        filename: jellyfin 
        update_cache: yes
    - name: Install jellyfin
      apt:
        name: jellyfin
        state: present
        update_cache: yes
    - name: Make sure Jellyfin is stopped
      ansible.builtin.service:
        name: jellyfin
        state: stopped
  - name: Setup NFS mount
    become: yes
    block:
      - name: Install helper package
        apt:
          name: nfs-common
          state: present
      - name: Configure NFS mount
        ansible.posix.mount:
          src: 10.13.2.10:/Media
          path: /mnt/medien
          opts: rw,relatime,vers=4.2,rsize=128000,wsize=128000,namlen=255,hard,proto=tcp,timeo=600,retrans=2
          state: mounted
          fstype: nfs4
  - name: Configuration
    become: yes    
    block:
      - name: Create a ext4 filesystem on /dev/vdb 
        community.general.filesystem:
          fstype: ext4
          dev: /dev/vdb
      - name: Configure virtual disk for transcode directory
        ansible.posix.mount:
          src: /dev/vdb
          path: /transcode
          opts: defaults
          state: mounted
          fstype: ext4
      - name: Allow Jellyfin user access to transcode directory
        file:
          path: /transcode
          state: directory
          owner: svc_jellyfin
          group: svc_jellyfin
          recurse: yes
      - name: Create Jellyfin systemd configuration file
        file: 
          path: /etc/systemd/system/jellyfin.service.d/override.conf
          state: touch
      - name: Configure Jellyfin to use svc_jellyfin user
        blockinfile:
          path: /etc/systemd/system/jellyfin.service.d/override.conf
          block: |
            [Service]
            User=svc_jellyfin
            Restart=always
            Environment="JELLYFIN_USER=svc_jellyfin"
      - name: Change ownership of jellyfin folders
        file:
          path: "{{item}}"
          state: directory
          owner: svc_jellyfin
          group: svc_jellyfin
          recurse: true
        with_items:
          - /var/lib/jellyfin
          - /var/cache/jellyfin
          - /var/log/jellyfin
          - /etc/jellyfin
      - name: Add Jellyfin service to FreeIPA
        ipa_service:
          name: "HTTP/{{ ansible_facts['nodename'] }}"
          ipa_host: "{{ ipa_server }}"
          ipa_user: "{{ ipa_admin_user }}"
          ipa_pass: "{{ ipa_admin_user_password }}"
          hosts:
            - "{{ ansible_facts['nodename'] }}"
      - name: Make certificate directory
        file:
          path: /etc/httpd/nssdb/
          state: directory
      - name: check if cert already present
        stat:
          path: "/etc/httpd/nssdb/certificate.pfx"
        register: stat_result
      - name: Get Certificate for Jellyfin in special format
        command: >- 
          ipa-getcert request -r 
          -f /etc/httpd/nssdb/certificate.crt 
          -k /etc/httpd/nssdb/privateKey.key 
          -N CN={{ ansible_facts['nodename'] }},O={{internal_domain | upper}} 
          -K HTTP/{{ ansible_facts['nodename'] }}@{{internal_domain | upper}} 
          -C "sh -c \"openssl pkcs12 -nodes -export -out /etc/httpd/nssdb/certificate.pfx -inkey /etc/httpd/nssdb/privateKey.key -in /etc/httpd/nssdb/certificate.crt -passout pass: && chown svc_jellyfin:svc_jellyfin /etc/httpd/nssdb/certificate.pfx\""
        when: stat_result.stat.exists == False
        register: result
      - debug: var=result
      - name: Reload systemd daemon
        ansible.builtin.systemd:
          daemon_reload: yes
  - name: Add Server to MC command
    become: true
    command: mc alias set local https://s3.{{internal_domain}}:9000 {{jellyfin.s3.user}} {{jellyfin.s3.password}}
  - name: Copy backup script
    become: true
    copy:
      src: jf-backup.sh
      dest: /root/
      owner: root
      group: root
      mode: '0750'