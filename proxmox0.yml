# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook
---
- hosts: proxmox
  vars_files:
    - secrets.yml
  vars_prompt:
    - name: _pass
      prompt: Enter password for FreeIPA user "{{ ipa_admin_user }}"
      private: yes
  vars:
    - ipa_host: ipa.i.stabl.one
    - realm: I.STABL.ONE
  roles:
    - role: ansible-acme-sh
      vars:
        acme_sh_uninstall: False
        acme_sh_become_user: "root"
        acme_sh_upgrade: False
        acme_sh_account_email: "{{ipa_admin_user}}@{{domain_name}}"
        acme_sh_default_staging: False
        acme_sh_default_force_issue: False
        acme_sh_default_dns_provider: "dns_cf"
        acme_sh_default_dns_provider_api_keys:
          "CF_Token": "{{minio.cf_token}}"
          "CF_Zone_ID": "{{CF_Zone_ID}}" 
        acme_sh_domains:
          - domains:
            - "s3.{{internal_domain}}"
            staging: False
            force_issue: True
            issue_post_hook: "chown svc_minio /etc/ssl/ansible/s3.{{internal_domain}}/private.key"
    - role: minio_server
      vars: 
        minio_server_opts: "--certs-dir /etc/ssl/ansible/s3.{{internal_domain}}/"
        minio_server_env_extra: "MINIO_SERVER_URL=\"https://s3.i.stabl.one:9000\""
        minio_server_datadirs:
          - /NVMe/fast_data

  tasks:
    - name: Certificate
      block:
      - debug: var=ansible_facts.hostname
      - debug: var=ansible_facts.fqdn
      - name: Check that the certificate file exists
        stat:
          path: "/etc/pve/nodes/{{ ansible_facts.hostname }}/pveproxy-ssl.pem"
        register: stat_result
      - name: check if certificate exists
        become: yes
        when: stat_result.stat.exists
        changed_when: false
        shell: 
          cmd: ipa-getcert status -f pveproxy-ssl.pem
          chdir: "/etc/pve/nodes/{{ ansible_facts.hostname }}/"
        register: status_result
      - name: Add service to FreeIPA
        when: not stat_result.stat.exists and not status_result.rc == 0 
        ipa_service:
          name: "HTTP/{{ ansible_facts.fqdn }}"
          state: present
          ipa_host: "{{ ipa_server }}"
          ipa_admin_user: "{{ ipa_admin_user }}"
          ipa_admin_user_password: "{{ _pass }}"
      - name: Request Certificate from IPA
        become: yes
        when: not stat_result.stat.exists and not status_result.rc == 0 
        register: certificate_request_result
        shell:
          cmd: ipa-getcert request -r -f pveproxy-ssl.pem -k pveproxy-ssl.key -N CN="{{ ansible_facts.fqdn }}" -K "HTTP/{{ ansible_facts.fqdn }}@"{{ realm }}""
          chdir: "/etc/pve/nodes/{{ ansible_facts.hostname }}/"
      - systemd:
          name: pveproxy
          state: restarted
        become: yes
        when: (not stat_result.stat.exists and not status_result.rc == 0 ) and certificate_request_result.changed