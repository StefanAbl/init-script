- import_tasks: install_apt.yml
  become: true
- import_tasks: transcode_disk.yml
  become: true
  when: jellyfin.extra_transcode_disk is defined
- import_tasks: custom_user.yml
  become: true
  when: jellyfin.user is defined

- name: Configuration
  become: yes
  block:
    - name: Add Jellyfin service to FreeIPA
      ipa_service:
        name: "HTTP/{{ ansible_facts['nodename'] }}"
        ipa_host: "{{ ipa_server }}"
        ipa_user: "{{ ipa_admin_user }}"
        ipa_pass: "{{ ipa_admin_user_password }}"
        hosts:
          - "{{ ansible_facts['nodename'] }}"
    - name: Make certificate directory
      file:
        path: /etc/httpd/nssdb/
        state: directory
    - name: check if cert already present
      stat:
        path: "/etc/httpd/nssdb/certificate.pfx"
      register: stat_result
    - name: Get Certificate for Jellyfin in special format
      command: >-
        ipa-getcert request -r
        -f /etc/httpd/nssdb/certificate.crt
        -k /etc/httpd/nssdb/privateKey.key
        -N CN={{ ansible_facts['nodename'] }},O={{internal_domain | upper}}
        -K HTTP/{{ ansible_facts['nodename'] }}@{{internal_domain | upper}}
        -C "sh -c \"openssl pkcs12 -nodes -export -out /etc/httpd/nssdb/certificate.pfx -inkey /etc/httpd/nssdb/privateKey.key -in /etc/httpd/nssdb/certificate.crt -passout pass: && chown svc_jellyfin:svc_jellyfin /etc/httpd/nssdb/certificate.pfx\""
      when: stat_result.stat.exists == False
      register: result
    - debug: var=result
    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes
- name: Add Server to MC command
  become: true
  command: mc alias set local https://s3.{{internal_domain}}:9000 {{jellyfin.s3.user}} {{jellyfin.s3.password}}
- name: Copy backup script
  become: true
  copy:
    src: jf-backup.sh
    dest: /root/
    owner: root
    group: root
    mode: '0750'
