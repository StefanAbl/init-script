apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://grafana.github.io/helm-charts
      chart: grafana
      version: 6.40.0
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 7
  values:
    useStatefulSet: true
    extraConfigmapMounts:
    - name: litestream-config
      mountPath: /etc/litestream.yml
      configMap: grafana-litestream
      readonly: true
      subPath: ""
    extraInitContainers:
    - name: init-litestream
      image: litestream/litestream:0.3.9
      args: ['restore', '-if-db-not-exists', '-v', '/var/lib/grafana/grafana.db']
      volumeMounts:
      - name: storage
        mountPath: "/var/lib/grafana"
      - name: litestream-config
        mountPath: /etc/litestream.yml
        subPath: litestream.yml
      env:
      - name: LITESTREAM_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: grafana-litestream
            key: access_key
      - name: LITESTREAM_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: grafana-litestream
            key: secret_key
    extraContainers: |
      - name: litestream
        image: litestream/litestream:0.3.9
        args: ['replicate']
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        - name: litestream-config
          mountPath: /etc/litestream.yml
          subPath: litestream.yml
        env:
        - name: LITESTREAM_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: grafana-litestream
              key: access_key
        - name: LITESTREAM_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-litestream
              key: secret_key
    imageRenderer:
      enabled: true
    grafana.ini:
      server:
        domain: grafana.k3s.i.${DOMAIN}
        root_url: https://%(domain)s/
        read_timeout: 10m
      dataproxy:
        timeout: 600
      security:
        disable_initial_admin_creation: true
      auth.ldap:
        enabled: true
        allow_sign_up: true
        config_file: /etc/grafana/ldap.toml
      smtp:
        enabled: true
        host: mail.${DOMAIN}:587
        user: ${GRAFANA_USER}@${DOMAIN}
        password: ${GRAFANA_USER_PASS}
        from_address: svc_grafana@${DOMAIN}
        ehlo_identity: "grafana.k3s.i.${DOMAIN}"
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: 'autoimported'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus-Kube
          type: prometheus
          url: http://kube-prometheus-stack-prometheus:9090
          access: proxy
        - name: Prometheus-External
          type: prometheus
          url: http://prometheus-external:9090
          access: proxy
        - name: Loki
          isDefault: true
          type: loki
          access: proxy
          url: http://loki-loki-distributed-gateway
    dashboards:
      default:
        # Ref: https://grafana.com/grafana/dashboards/12175
        calico-felix:
          gnetId: 12175
          revision: 5
          datasource: Prometheus-Kube
        # Ref: https://grafana.com/grafana/dashboards/13502
        minio:
          gnetId: 13502
          revision: 10
          datasource: Prometheus-External
        # Ref: https://grafana.com/grafana/dashboards/11315
        unifi-client-insights:
          gnetId: 11315
          revision: 8
          datasource: Prometheus-External
        # Ref: https://grafana.com/grafana/dashboards/11311
        unifi-network-sites:
          gnetId: 11311
          revision: 4
          datasource: Prometheus-External
        # Ref: https://grafana.com/grafana/dashboards/11314
        unifi-uap-insights:
          gnetId: 11314
          revision: 9
          datasource: Prometheus-External
        # Ref: https://grafana.com/grafana/dashboards/11312
        unifi-usw-insights:
          gnetId: 11312
          revision: 8
          datasource: Prometheus-External
        # Ref: https://grafana.com/grafana/dashboards/11313
        unifi-usg-insights:
          gnetId: 11313
          revision: 8
          datasource: Prometheus-External
        # Ref: https://grafana.com/grafana/dashboards/15549
        node-problem-detector:
          gnetId: 15549
          revision: 1
          datasource: Prometheus-Kube
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/cluster.json
          datasource: Prometheus-Kube
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/control-plane.json
          datasource: Prometheus-Kube
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
      datasources:
        enabled: true
        searchNamespace: ALL
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/issuer: freeipa-issuer
        cert-manager.io/issuer-group: certmanager.freeipa.org
        cert-manager.io/issuer-kind: ClusterIssuer
        cert-manager.io/common-name: grafana.k3s.i.${DOMAIN}
        nignx.ingress.kubernetes.io/force-ssl-redirect: "true"
      hosts:
      - "grafana.k3s.i.${DOMAIN}"
      tls:
      - secretName: grafana-tls
        hosts:
        - "grafana.k3s.i.${DOMAIN}"
    ldap:
      enabled: true
      config: |
        [[servers]]
        host = "ipa.i.${DOMAIN}"
        port = 636
        # Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS)
        use_ssl = true
        # set to true if you want to skip SSL cert validation
        ssl_skip_verify = true
        bind_dn = "uid=${GRAFANA_USER},cn=users,cn=accounts,dc=i,dc=stabl,dc=one"
        bind_password = "${GRAFANA_USER_PASS}"

        # User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
        # Allow login from email or username, example "(|(sAMAccountName=%s)(userPrincipalName=%s))"
        search_filter = "(&(uid=%s)(memberof=cn=ipausers,cn=groups,cn=accounts,dc=i,dc=stabl,dc=one))"
        search_base_dns = ["dc=i,dc=stabl,dc=one"]

        # Specify names of the LDAP attributes your LDAP uses
        [servers.attributes]
        member_of = "memberOf"
        email =  "mail"
        name = "displayName"
        username = "uid"

        [[servers.group_mappings]]
        group_dn = "cn=admins,cn=groups,cn=accounts,dc=i,dc=stabl,dc=one"
        org_role = "Admin"
        grafana_admin = true
        # The Grafana organization database id, optional, if left out the default org (id 1) will be used
        # org_id = 1
